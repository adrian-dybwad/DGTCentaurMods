#!/bin/bash

set -euo pipefail

DEFAULT_HOSTNAME="raspberrypi"
ARCH=`uname -m`
NEW_HOSTNAME="dgtcentaur"
CONFIG="/boot/firmware/config.txt"
PACKAGE="DGTCentaurMods"
PACKAGES_PATH="/opt"
DGTCM_PATH="${PACKAGES_PATH}/${PACKAGE}"
DATABASE="${DGTCM_PATH}/db/centaur.db"
CONFIGINI="${DGTCM_PATH}/config/centaur.ini"
CMDLINEFILE="/boot/firmware/cmdline.txt"
BTMAIN="/etc/bluetooth/main.conf"
DBUSSERVICE="/etc/systemd/system/dbus-org.bluez.service"
CENTAUR="/home/pi/centaur/"
CENTAUR_ENGINE="/home/pi/centaur/engines"
STOCKFISH="stockfish_pi"
RODENT_REPO="https://github.com/nescitus/rodent-iv.git"
MAIA_REPO="https://github.com/CSSLab/maia-chess.git"
VENV_DIR="$DGTCM_PATH/.venv"
REQ_VENV="$DGTCM_PATH/setup/requirements.txt"
WHEELS_DIR="$DGTCM_PATH/wheels"   # ship this in the .deb (optional but recommended)
################################

if ! cat $CONFIG | grep -q "#dgtcentaurmods"
then
    echo -e "::: Hardware configuration"
    echo -e "::: Backup some first"
    cp $CONFIG $CONFIG.bak
    cp $CMDLINEFILE $CMDLINEFILE.bak

    # Enable SPI bus if not enabled
    echo "::: Checking SPI"
    # Ensure SPI master is enabled (idempotent)
    if grep -q '^#dtparam=spi=on' "$CONFIG"; then
      sed -i 's/^#dtparam=spi=on/dtparam=spi=on/' "$CONFIG"
    elif ! grep -q '^dtparam=spi=on' "$CONFIG"; then
      printf '%s\n' 'dtparam=spi=on' >> "$CONFIG"
    fi
    
    echo -e "::: Checking SPI 1.0 bus."
    # If you really need /dev/spidev1.x, add an SPI1 overlay (choose CS count)
    if ! grep -q '^dtoverlay=spi1-.*cs' "$CONFIG"; then
      printf '%s\n' 'dtoverlay=spi1-1cs,cs0_spidev=on' >> "$CONFIG"
    elif grep -q '^dtoverlay=spi1-1cs' "$CONFIG" && ! grep -q 'cs0_spidev=on' "$CONFIG"; then
      # upgrade existing line to include spidev binding
      sed -i 's/^dtoverlay=spi1-1cs.*/dtoverlay=spi1-1cs,cs0_spidev=on/' "$CONFIG"
    fi

    # Make sure SPI master is enabled in firmware
    raspi-config nonint do_spi 0 || true
  
    # Ensure the user has SPI permissions
    adduser pi spi || true

    echo "::: Checking serial port. "
    # Enable UART (idempotent)
    if grep -q '^#enable_uart=1' "$CONFIG"; then
      sed -i 's/^#enable_uart=1.*/enable_uart=1/' "$CONFIG"
    elif ! grep -q '^enable_uart=1' "$CONFIG"; then
      printf '%s\n' 'enable_uart=1' >> "$CONFIG"
    fi
    
    # Mark file as modified
    sed -i "$ a #dgtcentaurmods" $CONFIG
fi

if cat $CMDLINEFILE | grep -q "console=serial0"
then
    echo -e "::: Disable console on ttyS0"
        REPLY=$(sed 's/[^ ]* *//' $CMDLINEFILE)
        echo -e "$REPLY" > $CMDLINEFILE
fi

    # Setting up Bluetooth configuration
    echo -e "::: Setting up Bluetooth configuration"

    # Unblock Bluetooth hardware
    sudo rfkill unblock bluetooth || true

    # Install Bluetooth configuration files
    sudo mkdir -p /etc/bluetooth
    sudo mkdir -p /etc/systemd/system/bluetooth.service.d

    # Copy pin.conf if it doesn't exist
    if [ ! -f /etc/bluetooth/pin.conf ]; then
        echo "* *" | sudo tee /etc/bluetooth/pin.conf > /dev/null
    fi

    # Copy machine-info for Bluetooth name
    if [ ! -f /etc/machine-info ]; then
        echo "PRETTY_HOSTNAME=PCS-REVII-081500" | sudo tee /etc/machine-info > /dev/null
    fi

    # Install systemd service overrides (but NOT rfcomm.service)
    sudo cp ${DGTCM_PATH}/../etc/systemd/system/bluetooth.service.d/*.conf /etc/systemd/system/bluetooth.service.d/ 2>/dev/null || true
    sudo cp ${DGTCM_PATH}/../etc/systemd/system/var-run-sdp.* /etc/systemd/system/ 2>/dev/null || true
    sudo cp ${DGTCM_PATH}/../etc/systemd/system/bthelper@.service.d/*.conf /etc/systemd/system/bthelper@.service.d/ 2>/dev/null || true

    # Set correct permissions
    sudo chmod 644 /etc/bluetooth/pin.conf
    sudo chmod 644 /etc/machine-info

    echo -e "::: Enabling Bluetooth services"
    systemctl daemon-reload
    systemctl enable bluetooth.service || true
    systemctl enable var-run-sdp.path || true

    # Start Bluetooth
    systemctl start bluetooth || true


# Make DGTCM available to all users (idempotent)
DISTPKG_DIR="/usr/lib/python3/dist-packages"
TARGET_PATH="${DISTPKG_DIR}/DGTCentaurMods"
install -d "$DISTPKG_DIR"
# Replace any existing file/dir/symlink with a symlink to $DGTCM_PATH
rm -rf "$TARGET_PATH"
ln -sfnT "$DGTCM_PATH" "$TARGET_PATH"

# Allow flask on port 80
# sudo touch /etc/authbind/byport/80
# sudo chmod 777 /etc/authbind/byport/80

# Allow memory access for epaper driver
sudo usermod -a -G gpio pi
sudo usermod -a -G kmem pi


##### Enable systemd services.
echo -e "::: Setup services"
    systemctl daemon-reload
    echo -e "::: Disabling rfcomm.service (application manages RFCOMM in Python)"
    systemctl disable rfcomm.service 2>/dev/null || true
    systemctl stop rfcomm.service 2>/dev/null || true
    # Migrate web service name: stop/disable old unit, remove file if present
    if systemctl list-unit-files | grep -q '^centaurmods-web.service'; then
        systemctl stop centaurmods-web.service 2>/dev/null || true
        systemctl disable centaurmods-web.service 2>/dev/null || true
    fi
    if [ -e /etc/systemd/system/centaurmods-web.service ]; then
        rm -f /etc/systemd/system/centaurmods-web.service
        systemctl daemon-reload
    fi
    systemctl enable DGTCentaurModsWeb.service
    systemctl enable DGTCentaurMods.service
#    systemctl enable ntp
    systemctl enable var-run-sdp.path
    systemctl enable var-run-sdp.service
    systemctl enable stopDGTController.service
    systemctl start var-run-sdp.path

# Setup nginx proxy for web service
echo -e "::: Setting up nginx proxy"
    if [ -f "${DGTCM_PATH}/scripts/enable-web-proxy.sh" ]; then
        chmod +x "${DGTCM_PATH}/scripts/enable-web-proxy.sh"
        "${DGTCM_PATH}/scripts/enable-web-proxy.sh"
    else
        echo -e "::: Warning: enable-web-proxy.sh not found"
    fi

# Update main.conf in /etc/bluetooth
    cp $BTMAIN $BTMAIN.bak
    sed -i "/DiscoverableTimeout/s/^# *//" $BTMAIN
    sed -i "/PairableTimeout/s/^# *//" $BTMAIN
    sed -i "s/#JustWorksRepairing = never/JustWorksRepairing = always/g" $BTMAIN
    #Mark file as changed
    sed -i "$ a #dgtcentaurmods" $BTMAIN

systemctl daemon-reload

function update_hostname {
#Do not update unless hostname is still the default one.
if [ $(hostname) = $DEFAULT_HOSTNAME ]
then
    sed -i "s/$DEFAULT_HOSTNAME/$NEW_HOSTNAME/g" /etc/hosts
    sed -i "s/$DEFAULT_HOSTNAME/$NEW_HOSTNAME/g" /etc/hostname
fi
}

# Install Stockfish if in build
if [[ -e "${DGTCM_PATH}/engines/${STOCKFISH}" ]]; then
    echo -e "::: Installing Stockfish engine"
    mkdir -p "${CENTAUR_ENGINE}"
    if [[ -f "${CENTAUR_ENGINE}/${STOCKFISH}" ]]; then
        mv "${CENTAUR_ENGINE}/${STOCKFISH}" "${CENTAUR_ENGINE}/${STOCKFISH}.bak"
    fi
    mv "${DGTCM_PATH}/engines/${STOCKFISH}" "${CENTAUR_ENGINE}/${STOCKFISH}"
    chown -R pi:root "${CENTAUR_ENGINE}"
fi

#
#echo -e "::: Installing python packages."
#    cd $DGTCM_PATH
#    CFLAGS="-fcommon" pip3 install -r $DGTCM_PATH/setup/requirements.txt
echo -e "::: Installing python packages (trixie-safe)"

export DEBIAN_FRONTEND=noninteractive

# Create venv if missing
if [ ! -x "$VENV_DIR/bin/python" ]; then
  python3 -m venv --system-site-packages "$VENV_DIR"
  sudo chmod +x $PACKAGES_PATH/run.sh
fi

# Upgrade pip/wheel inside the venv
"$VENV_DIR/bin/python" -m pip install --upgrade pip wheel

# Install your extra packages into the venv
if [ -f "$REQ_VENV" ]; then
  if [ -d "$WHEELS_DIR" ]; then
    # fully offline / reproducible
    "$VENV_DIR/bin/pip" install --no-index --find-links "$WHEELS_DIR" -r "$REQ_VENV"
  else
    # will hit the network; avoid if possible
    "$VENV_DIR/bin/pip" install -r "$REQ_VENV"
  fi
fi

function insertMaia {
    if [[ $ARCH == "armv6"* ]]; then
        #Remove maia and don't get weights
        echo -e "::: This system is not compatible with maia engine. Removing"
        rm -rf ${DGTCM_PATH}/engines/maia* > /dev/null 2>&1
        return
    fi
    if [ ! -d  ${DGTCM_PATH}/tmp ]
    then
        mkdir ${DGTCM_PATH}/tmp
    fi
    if [ ! -d ${DGTCM_PATH}/tmp/maia-chess ]
    then
        git clone --depth 1 $MAIA_REPO ${DGTCM_PATH}/tmp/maia-chess;
        if (($? > 0))
            then echo "git clone maia chess failed with $?"
        fi
    fi
    cp -rn ${DGTCM_PATH}/tmp/maia-chess/maia_weights ${DGTCM_PATH}/engines/
    cp -n ${DGTCM_PATH}/engines/maia_weights/maia-1900.pb.gz ${DGTCM_PATH}/engines/
    chmod 755 ${DGTCM_PATH}/engines/maia
}

function insertRodentIV {
    if [ ! -d  ${DGTCM_PATH}/tmp ]
    then
        mkdir ${DGTCM_PATH}/tmp
    fi
    if [ ! -d ${DGTCM_PATH}/tmp/rodent-iv ]
    then
        git clone --depth 1 $RODENT_REPO ${DGTCM_PATH}/tmp/rodent-iv;
        if (($? > 0))
            then echo "git clone rodentiv failed with $?"
        fi
    fi
    cp -rn ${DGTCM_PATH}/tmp/rodent-iv/personalities ${DGTCM_PATH}/engines/
    cp -rn ${DGTCM_PATH}/tmp/rodent-iv/books ${DGTCM_PATH}/engines/
    chmod 744 ${DGTCM_PATH}/engines/rodentIV
}

function insertZahak {
    chmod 755 ${DGTCM_PATH}/engines/zahak

}


insertMaia
insertRodentIV
insertZahak

# Setting final permissions
function setPermissions {
    chown -R pi:pi ${DGTCM_PATH}
    if [[ -d "${CENTAUR}" ]]; then
        chown -R pi:root ${CENTAUR}
    fi

}


function copyDefaults {
    cp -rn ${DGTCM_PATH}/defaults/* ${DGTCM_PATH}/
}

update_hostname

#Old versions special handling tasks
function cleanOldBeta {
    rm -rf /home/pi/DGTCentaurMods
}


function restoreConfig {
    cp /tmp/config/centaur.ini $CONFIGINI
}


function restoreDatabase {
    cp /tmp/db/centaur.db ${DGTCM_PATH}/db && rm -r /tmp/db
}


case $1 in
    configure* )
        case $2 in
            1.0-beta|1.0.1-beta)
                cleanOldBeta
                ;;
        esac       
    echo -e "::: Finalizing install..."
    #Copy over all defaults from /defaults
    copyDefaults

    # Setup nginx proxy for web service
    echo -e "::: Setting up nginx proxy"
    if [ -f "${DGTCM_PATH}/scripts/enable-web-proxy.sh" ]; then
        chmod +x "${DGTCM_PATH}/scripts/enable-web-proxy.sh"
        "${DGTCM_PATH}/scripts/enable-web-proxy.sh"
    else
        echo -e "::: Warning: enable-web-proxy.sh not found"
    fi

    setPermissions
    
    # Guarded reboot (fresh installs and upgrades)
    # if [ -z "${DGTCM_SKIP_REBOOT:-}" ]; then
    #     echo "Rebooting to complete DGTCentaurMods installation..."
    #     if [ -d /run/systemd/system ] && command -v systemctl >/dev/null 2>&1; then
    #         nohup /bin/sh -c "sleep 3; systemctl reboot" >/dev/null 2>&1 &
    #     else
    #         nohup /bin/sh -c "sleep 3; /sbin/shutdown -r now" >/dev/null 2>&1 &
    #     fi
    # else
    #     echo "DGTCM_SKIP_REBOOT set; skipping automatic reboot."
    # fi
    ;;
esac


exit 0

